#+TITLE: Cookiecutter CI CWI

A Cookiecutter template for starting your Python projects at CI CWI.

This template lets you easily set up a Python package for your own projects.
It automatically creates a directory tree with sensible locations for your
code, documentation and tests, and directly makes a number of useful tools
available to more conveniently install, document and eventually publish your
project.

- License: BSD

* Features

- Documentation with Sphinx
- Conda packaging

* Quickstart
Install the latest Cookiecutter if you haven't installed it yet (this requires
Cookiecutter 1.4.0 or higher)::

#+BEGIN_SRC bash
pip install -U cookiecutter
#+END_SRC


Generate a Python package project::

#+BEGIN_SRC bash
cookiecutter https://github.com/cicwi/cookiecutter-cicwi.git
#+END_SRC

Then:
1. Answer the questions that cookiecutter asks, for instance
   #+BEGIN_EXAMPLE
   $ cookiecutter gh:cicwi/cookiecutter-cicwi
   You've downloaded /ufs/hendriks/.cookiecutters/cookiecutter-cicwi before. Is it okay to delete and re-download it? [yes]: yes
   full_name [Your Name]: Allard Hendriksen
   email [example@example.com]: allard.hendriksen@cwi.nl
   github_username [cicwi]: ahendriksen
   project_name [Human readable project name]: Cone Balls
   project_slug [cone_balls]:
   project_short_description [Python CI CWI boilerplate package.]: A package for bubble phantom generation using a cone beam CT geometry.
   version [0.1.0]:
   use_pytest [n]:
   Select open_source_license:
   1 - GNU General Public License v3
   2 - Apache Software License 2.0
   3 - Not open source
   Choose from 1, 2, 3 [1]: 1
   #+END_EXAMPLE
   _Note_: The project's =slug= should resemble the project name without spaces, dots, or hyphens. It is used as e.g. the
   directory name, GitHub project name, URL, Python library name and so on.
2. =cd new-project=
3. =git init=
4. =git add .=
5. =git commit -m "Initial commit"=
6. Create a GitHub repository
7. =git remote add origin git@github.com:<your-GitHub-username>/<your-project-name>.git=
8. =git push -u origin master=
9. Install development requirements. This installs some development
   tools and installs the current project as "editable". This means
   that any change you make to the source files is reflected in the
   'installed' package.
   1. =make install_dev=
10. Write software. You can start by extending the script in
    =examples/getting_started.py=, or create more scripts in the
    =examples= directory. Once you identify common functionality, you
    can add functions to the main module file in
    =your_project_slug/your_project_slug.py=. The =getting_started.py= file
    contains examples how to call these functions.
11. Update README
12. Keep changelog
13. Update documentation
    1. make docs
14. Commit code
15. Update version in =VERSION= file
16. Push to GitHub
17. Create release on GitHub
18. Create GitHub pages documentation

* Make commands

The project comes with a default Makefile. The Makefile has a
reasonable number of built-in commands.

** Development requirements
Download and install development requirements into your current conda
environment with
#+BEGIN_SRC bash
make install_dev
#+END_SRC
This command also install your current project as an "editable"
project into your current Conda environment. This means that any
change to your source files will be reflected in the "installed"
environment.
** Install requirements
Download and install your project requirements into your current conda
environment with
#+BEGIN_SRC bash
make install
#+END_SRC
** Update the documentation.
Update your documentation with
#+BEGIN_SRC bash
make docs
#+END_SRC
** Code formatting
Automatically reformat the code of your project to a common format
with
#+BEGIN_SRC bash
make style
#+END_SRC
** Build conda package
The command
#+BEGIN_SRC bash
make conda_package
#+END_SRC
builds a conda package, which you can share on https://anaconda.org/.
* Authors and contributors
- Allard Hendriksen
- Jan-Willem Buurlage

* How to contribute
Contributions are always welcome. Please submit pull requests against
the ~develop~ branch.

If you have any issues, questions, or remarks, then please open an
issue on GitHub.

* License
This project is licensed under the BSD License - see the =LICENSE= file for details
